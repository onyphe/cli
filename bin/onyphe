#!/usr/bin/perl
#
# $Id$
#
use strict;
use warnings;

use utf8;
binmode(STDOUT, ":utf8");

use Getopt::Long;
use Metabrik::Client::Onyphe;
use Metabrik::Client::Onyphe::Log;

# Default values
my %lopts = (
   # General options:
   verbose => 1,
   onyphe_rc => $ENV{HOME}.'/.onyphe_rc',
   maxpage => 1,
   apiurl => 'https://www.onyphe.io/api/v2',
   apisize => 10,
   apitrackquery => 0,
   apikeepalive => 0,
   wait => 1,
   # API options:
   search => 1,  # Default to use Search API
   bulk => 0,    # Enable Bulk API
   simple => 0,  # Use Simple API
   best => 0,    # Enable Best API
   category => 'datascan',  # Default category to query
);

# Option parsing
GetOptions(
   # General options:
   "verbose=i" => \$lopts{verbose},             # -verbose 1
   "maxpage=i" => \$lopts{maxpage},             # -maxpage 10
   "apiurl=s" => \$lopts{apiurl},               # -apiurl https://beta.onyphe.io/api/v2
   "apikey=s" => \$lopts{apikey},               # -apikey YOUR_APIKEY
   "apisize=i" => \$lopts{apisize},             # -apisize 100
   "apitrackquery=i" => \$lopts{apitrackquery}, # -apitrackquery 1
   "apikeepalive=i" => \$lopts{apikeepalive},   # -apikeelalive 1
   "wait=i" => \$lopts{wait},                   # -wait 3
   # API options:
   "category=s" => \$lopts{category},  # -category datascan,synscan
   "bulk" => \$lopts{bulk},            # -bulk
   "best" => \$lopts{best},            # -best
   # APIs:
   "user" => \$lopts{user},               # -user
   "simple" => \$lopts{simple},           # -simple
   "summary=s" => \$lopts{summary},       # -summary ip, -summary domain, -summary hostname
   "search" => \$lopts{search},           # -search
   "export" => \$lopts{export},           # -export
   "discovery" => \$lopts{discovery},     # -discovery
   "alert=s" => \$lopts{alert},           # -alert list
   "alertname=s" => \$lopts{alertname},   # -alertname "New alert"
   "alertemail=s" => \$lopts{alertemail}, # -alertemail example@example.com
   "alertthreshold=s" => \$lopts{alertthreshold}, # -alertthreshold '>0'
) or usage();

my $arg = pop @ARGV;  # Global argument

# Load API key from onyphe rc file
load_onyphe_rc(%lopts);

# Sanity checks
sanity_checks(\%lopts, $arg);

# Load logging module
my $log = Metabrik::Client::Onyphe::Log->new_brik_init;

# Ready to rock
my $cli = Metabrik::Client::Onyphe->new_brik_init;
$cli->log($log);
$cli->brik_init;
$cli->log->level($lopts{verbose});

# Set general options:
$lopts{maxpage} = (defined($lopts{maxpage}) && $lopts{maxpage} > 1000)
   ? 1000 : $lopts{maxpage};
$cli->maxpage($lopts{maxpage});
$cli->apiurl($lopts{apiurl});
$cli->apikey($lopts{apikey});
$cli->apisize($lopts{apisize});
$cli->apitrackquery($lopts{apitrackquery});
$cli->apikeepalive($lopts{apikeepalive});
$cli->wait($lopts{wait});

# Set API options:
$cli->category($lopts{category});
$cli->bulk($lopts{bulk});
$cli->best($lopts{best});

# Launch query
if ($lopts{export}) {
   $cli->export($arg) or $cli->log->fatal("export: aborted");
}
elsif ($lopts{user}) {
   $cli->user($arg) or $cli->log->fatal("user: aborted");
}
elsif ($lopts{simple}) {
   $cli->simple($arg) or $cli->log->fatal("simple: aborted");
}
elsif ($lopts{summary}) {
   $cli->summary($arg, $lopts{summary}) or $cli->log->fatal("summary: aborted");
}
elsif ($lopts{discovery}) {
   $cli->discovery($arg) or $cli->log->fatal("discovery: aborted");
}
elsif ($lopts{alert}) {
   $cli->alert($lopts{alert}, $arg, undef, $lopts{alertname}, $lopts{alertemail},
      $lopts{alertthreshold}) or $cli->log->fatal("alert: aborted");
}
else {  # Use Search API by default:
   $cli->search($arg) or $cli->log->fatal("search: aborted");
}

exit(0);

#
# Local subroutines
#

sub usage {
   print<<EOF

Usage: onyphe [options] -search -category datascan 'OQL | OPL'
       onyphe [options] -user
       onyphe [options] -simple -category datascan 'IP | OPL'
       onyphe [options] -simple -category datascan 'DATA | OPL'
       onyphe [options] -summary ip '1.1.1.1 | OPL'
       onyphe [options] -summary domain 'example.com | OPL'
       onyphe [options] -summary domain -bulk 'domains.txt | OPL'
       onyphe [options] -export -category datascan 'OQL | OPL'
       onyphe [options] -alert list
       onyphe [options] -alert add -category datascan 'OQL' -alertname test -alertemail user\@example.com
       onyphe [options] -alert del \$id

General options:

   -verbose <0|1|2|3>                      verbosity level (default: 1)
   -maxpage <MAXPAGE>                      max page to fetch (default: 1)
   -wait <SECONDS>                         wait time in regards to rate limit (default: 1)
   -apiurl <URL>                           use another URL endpoint for API calls
   -apikey <APIKEY>                        your personal ONYPHE API key
   -apitrackquery <0|1>                    add trackquery field into results (default: 0)
   -apikeepalive <0|1>                     use a keepalive message (default: 0)

API options:
   -category <category1,category2,...>     give which category to query (default: datascan)
   -bulk                                   use Bulk API versions for given query
   -best                                   use Best API versions for given query

APIs:

   -user                                                 get information on your license
   -search 'OQL | OPL'                                   use Search API for query
   -export 'OQL | OPL'                                   use Export API for query
   -simple 'OQL | OPL'                                   use Simple API for query
   -simple -best 'OQL | OPL'                             use Simple Best API for query
   -simple -bulk 'input.txt | OPL'                       use Bulk Simple API for query
   -simple -bulk -best 'input.txt | OPL'                 use Bulk Simple Best API for query
   -summary ip 'IP | OPL'                                use ip Summary API for query
   -summary domain 'DOMAIN | OPL'                        use domain Summary API for query
   -summary hostname 'HOSTNAME | OPL'                    use hostname Summary API for query
   -summary -bulk <ip|domain|hostname> 'input.txt | OPL' use Bulk Summary API for query
   -discovery 'input.txt | OPL'                          use Discovery API for query
   -alert list                                           use Alert API for query
   -alert del \$id                                        use Alert API for query
   -alert add -alertname NAME -alertemail EMAIL 'OQL'    use Alert API for query

EOF
;

   exit(0);
}

sub load_onyphe_rc {
   my ($lopts) = @_;

   # If already given from command line, do not read rc file for apikey
   if (length($lopts{apikey})) {
      return 1;
   }

   if (-f $lopts{onyphe_rc}) {
      open(my $in, '<', $lopts{onyphe_rc})
         or die("ERROR: open: ".$lopts{onyphe_rc}.": failed: $!");
      chomp(my $apikey = <$in>);
      if (length($apikey) && $apikey =~ m{^[a-z0-9]{40}$}) {
         $lopts{apikey} = $apikey;
      }
      else {
         die("ERROR: apikey [$apikey] invalid format found in ".$lopts{onyphe_rc}.
            " file");
      }
      close($in);
   }

   return 1;
}

sub sanity_checks {
   my ($lopts, $arg) = @_;

   #print Data::Dumper::Dumper($lopts)."\n";
   #print Data::Dumper::Dumper($arg)."\n";

   if (!defined($lopts->{search}) && !defined($lopts->{simple})
   &&  !defined($lopts->{summary}) && !defined($lopts->{user})
   &&  !defined($lopts->{export}) && !defined($lopts->{discovery})) {
      print "ERROR: need one of -search, -simple, -summary, -export, -user or ".
         "-discovery argument\n".
         "Exemple: -search 'product:nginx', -user or -export 'product:nginx'\n\n";
      usage();
   }

   if (defined($lopts{alert})) {
      if ($lopts{alert} eq 'add') {
         if (!defined($lopts{alertname}) || !defined($lopts{alertemail})) {
            print "ERROR: need all alert arguments to be set\n".
               "Example: -alert add -alertname test -alertemail user\@example.com ".
               "'domain:example.com'\n\n";
            usage();
         }
      }
      elsif ($lopts{alert} eq 'del') {
         if (!defined($arg) || $arg !~ m{^\d+$}) {
            print "ERROR: need an alert id argument to be set\n".
               "Example: -alert del 0\n\n";
            usage();
         }
      }
   }

   if (!defined($lopts{alert}) && !defined($lopts{user}) && !defined($arg)) {
      print "ERROR: need a query argument\n".
         "Example: -search 'domain:example.com'\n\n";
      usage();
   }

   if (!defined($lopts->{apikey})) {
      print "ERROR: -apikey argument missing\n".
         "Example: -apikey YOUR_API_KEY\n\n";
      usage();
   }

   if ($lopts{summary} && !defined($lopts{summary})) {
      print "ERROR: -summary parameter used but value is missing\n".
         "Example: -summary ip, -summary domain or -summary hostname\n\n";
      usage();
   }

   if (defined($lopts->{maxpage}) && $lopts->{maxpage} !~ m{^\d+$}) {
      print "ERROR: invalid maxpage value chosen: ".$lopts->{maxpage}."\n".
         "Example: -maxpage 100\n\n";
      usage();
   }

   if ($lopts->{verbose} !~ m{^\d+$}) {
      print "ERROR: invalid verbose value chosen: ".$lopts->{verbose}."\n".
         "Example: -verbose 2\n\n";
      usage();
   }

   return 1;
}

1;

__END__

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2018-2022, ONYPHE

You may distribute this module under the terms of The BSD 3-Clause License.
See LICENSE file in the source distribution archive.

=head1 AUTHOR

ONYPHE

=cut
