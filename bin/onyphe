#!/usr/bin/perl
#
# $Id: onyphe,v d629ccff5f0c 2018/12/03 12:59:47 gomor $
#
use strict;
use warnings;

use Getopt::Long;
use Metabrik::Client::Onyphe;
use Metabrik::Client::Onyphe::Log;

# Default values
my %lopts = (
   verbose => 1,
   onyphe_rc => $ENV{HOME}.'/.onyphe_rc',
   page => '1',
   autoscroll => '0',
   apiurl => 'https://www.onyphe.io/api/v2',
   wait => 1,
);

# Option parsing
GetOptions(
   "user" => \$lopts{user},
   "simple=s" => \$lopts{simple},
   "summary=s" => \$lopts{summary},
   "alert=s" => \$lopts{alert},
   "value=s" => \$lopts{value},
   "search=s" => \$lopts{search},
   "export=s" => \$lopts{export},
   "verbose=i" => \$lopts{verbose},
   "apikey=s" => \$lopts{apikey},
   "page=i" => \$lopts{page},
   "maxpage=i" => \$lopts{maxpage},
   "autoscroll=i" => \$lopts{autoscroll},
   "apiurl=s" => \$lopts{apiurl},
   "wait=i" => \$lopts{wait},
   "master" => \$lopts{master},
) or usage();

# Load API key from onyphe rc file
load_onyphe_rc(%lopts);

# Sanity checks
sanity_checks(%lopts);

# Load logging module
my $log = Metabrik::Client::Onyphe::Log->new_brik_init;

# Ready to rock
my $cli = Metabrik::Client::Onyphe->new_brik_init;
$cli->log($log);
$cli->brik_init;
$cli->log->level($lopts{verbose});
$cli->apikey($lopts{apikey});
$cli->apiurl($lopts{apiurl});
$cli->autoscroll($lopts{autoscroll} ? 1 : 0);
$cli->wait($lopts{wait});
$cli->master($lopts{master} ? 1 : 0);

# Launch query
if ($lopts{search}) {   # Search API query mode with pipeline support
   $cli->pipeline($lopts{search}, 'search', $lopts{page}, $lopts{maxpage})
      or $cli->log->fatal("search: aborted");
}
elsif ($lopts{export}) {   # Export API query mode with pipeline support
   $cli->pipeline($lopts{export}, 'export')
      or $cli->log->fatal("export: aborted");
}
elsif ($lopts{summary}) {
   my $summary = $lopts{summary};
   my $value = $lopts{value};
   $cli->summary($summary, $value)
      or $cli->log->fatal("summary: aborted");
}
elsif ($lopts{user}) {
   $cli->user() or $cli->log->fatal("user: aborted");
}
elsif ($lopts{alert}) {
   my $alert = $lopts{alert};
   if( defined($lopts{value}) )
   {
    my $value;
    $value = $lopts{value};
    $cli->alert($alert, $value)
      or $cli->log->fatal("alert: aborted");
   }
   else
   {
    $cli->alert($alert,) #Â no value
      or $cli->log->fatal("alert: aborted");
   }
}
else {  # Simple API query mode
   my $simple = $lopts{simple};
   my $value = $lopts{value};
   $cli->simple($simple, $value, $lopts{page}, $lopts{maxpage})
      or $cli->log->fatal("simple: aborted");
}

exit(0);

#
# Local subroutines
#

sub usage {
   print<<EOF

Usage: onyphe [options] -search 'category:CATEGORY SEARCH'
       onyphe [options] -user
       onyphe [options] -simple API -value VALUE
       onyphe [options] -summary API -value VALUE
       onyphe [options] -alert API -value VALUE

   -user                                   get information on your license
   -apikey <APIKEY>                        your personal ONYPHE API key
   -search <SEARCH>                        use Search API for query
   -summary <API>                          use Summary API for query (need -value)
   -simple <API>                           use Simple API for query (need -value)
   -alert <list|add|del>                   use alert API
   -value <VALUE>                          value to use when using Simple or Summary API
   -page <PAGE>                            fetch results for page (default: 1)
   -autoscroll <0|1>                       use autoscroll feature (default: 0)
                                           WARNING: may consume a lot of credit
   -maxpage <MAXPAGE>                      max page to fetch in autoscroll mode
   -verbose <0|1|2|3>                      verbosity level (default: 1)
   -wait <SECONDS>                         wait time in regards to rate limit (default: 1)

EOF
;

   exit(0);
}

sub load_onyphe_rc {
   my ($lopts) = @_;

   # If already given from command line, do not read rc file for apikey
   if (length($lopts{apikey})) {
      return 1;
   }

   if (-f $lopts{onyphe_rc}) {
      open(my $in, '<', $lopts{onyphe_rc})
         or die("ERROR: open: ".$lopts{onyphe_rc}.": failed: $!");
      chomp(my $apikey = <$in>);
      if (length($apikey) && $apikey =~ m{^[a-z0-9]{40}$}) {
         $lopts{apikey} = $apikey;
      }
      else {
         die("ERROR: apikey [$apikey] invalid format found in ".$lopts{onyphe_rc}.
            " file");
      }
      close($in);
   }

   return 1;
}

sub sanity_checks {
   my ($lopts) = @_;

   if (! defined($lopts{search}) && ! defined($lopts{simple})
   &&  ! defined($lopts{summary}) && ! defined($lopts{user})
   &&  ! defined($lopts{export}) && ! defined($lopts{alert})) {
      print "ERROR: need -search, -simple, -summary, -export, -alert or -user argument\n";
      usage();
   }

   if (! defined($lopts{apikey})) {
      print "ERROR: -apikey argument missing\n";
      usage();
   }

   if (($lopts{simple} || $lopts{summary}) && ! defined($lopts{value})) {
      print "ERROR: -simple or -summary argument used but -value argument missing\n";
      usage();
   }

   if (! ($lopts{simple} || $lopts{summary} || $lopts{alert}) && defined($lopts{value})) {
      print "ERROR: -simple or -summary or -alert argument missing but -value argument used\n";
      usage();
   }

   if ($lopts{page} !~ m{^\d+$}) {
      print "ERROR: invalid page chosen: ".$lopts{page}."\n";
      usage();
   }

   if (defined($lopts{maxpage}) && $lopts{maxpage} !~ m{^\d+$}) {
      print "ERROR: invalid maxpage chosen: ".$lopts{maxpage}."\n";
      usage();
   }

   if ($lopts{verbose} !~ m{^\d+$}) {
      print "ERROR: invalid verbose mode chosen: ".$lopts{verbose}."\n";
      usage();
   }

   return 1;
}

1;

__END__

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2018-2020, ONYPHE

You may distribute this module under the terms of The BSD 3-Clause License.
See LICENSE file in the source distribution archive.

=head1 AUTHOR

ONYPHE

=cut
